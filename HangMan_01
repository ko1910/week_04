#include <iostream>
#include <cstdlib>
#include <ctime>
using namespace std;

string chooseWord()
{
    string WORD_LIST[] = {
        "angle", "ant", "apple", "arch", "arm", "army",
        "baby", "bag", "ball", "band", "basin", "basket", "bath", "bed", "bee", "bell", "berry",
        "bird", "blade", "board", "boat", "bone", "book", "boot", "bottle", "box", "boy",
        "brain", "brake", "branch", "brick", "bridge", "brush", "bucket", "bulb", "button",
        "cake", "camera", "card", "cart", "carriage", "cat", "chain", "cheese", "chest",
        "chin", "church", "circle", "clock", "cloud", "coat", "collar", "comb", "cord",
        "cow", "cup", "curtain", "cushion",
        "dog", "door", "drain", "drawer", "dress", "drop", "ear", "egg", "engine", "eye",
        "face", "farm", "feather", "finger", "fish", "flag", "floor", "fly",
        "foot", "fork", "fowl", "frame", "garden", "girl", "glove", "goat", "gun",
        "hair", "hammer", "hand", "hat", "head", "heart", "hook", "horn", "horse",
        "hospital", "house", "island", "jewel", "kettle", "key", "knee", "knife", "knot",
        "leaf", "leg", "library", "line", "lip", "lock",
        "map", "match", "monkey", "moon", "mouth", "muscle",
        "nail", "neck", "needle", "nerve", "net", "nose", "nut",
        "office", "orange", "oven", "parcel", "pen", "pencil", "picture", "pig", "pin",
        "pipe", "plane", "plate", "plow", "pocket", "pot", "potato", "prison", "pump",
        "rail", "rat", "receipt", "ring", "rod", "roof", "root",
        "sail", "school", "scissors", "screw", "seed", "sheep", "shelf", "ship", "shirt",
        "shoe", "skin", "skirt", "snake", "sock", "spade", "sponge", "spoon", "spring",
        "square", "stamp", "star", "station", "stem", "stick", "stocking", "stomach",
        "store", "street", "sun", "table", "tail", "thread", "throat", "thumb", "ticket",
        "toe", "tongue", "tooth", "town", "train", "tray", "tree", "trousers", "umbrella",
        "wall", "watch", "wheel", "whip", "whistle", "window", "wire", "wing", "worm",
    };
    const int WORD_COUNT = sizeof(WORD_LIST) / sizeof(string);
    int randomIndex = rand() % WORD_COUNT;
    return WORD_LIST[randomIndex];
}

string update(string guessedWord, string secretWord, char guess)
{
    for (int i = 0; i < secretWord.length(); i++) {
        if (secretWord[i] == guess) {
            guessedWord[i] = guess;
        }
    }
    return guessedWord;
}

bool contains(string secretWord, char guess)
{
    for (int i=0; i < secretWord.length(); i++)
    {
        if (secretWord[i] == guess) {
            return true;
        }
    }
    return false;
}

void renderGame(string guessedWord, int badGuessCount)
{
    cout << guessedWord << endl;
    cout << "Number of wrong guesses: " << badGuessCount << endl;
}

int main()
{
    srand(time(0)); // Seed the random number generator

    string secretWord;
    secretWord = chooseWord();
    char guess;
    const int MAX_BAD_GUESSES = 7;
    string guessedWord(secretWord.length(), '_'); // Initialize guessedWord with underscores

    int badGuessCount = 0;
    do {
        cout << "Guess a character: " << endl;
        cin >> guess;
        if (contains(secretWord, guess))  {
            cout << "You guessed a correct character! "<< endl;
            guessedWord = update(guessedWord, secretWord, guess);
            renderGame(guessedWord, badGuessCount);
        } else {
            cout << "This character is incorrect!" << endl << "Number of wrong guesses: ";
            badGuessCount++;
            cout << badGuessCount << endl;
        }
    } while (badGuessCount < MAX_BAD_GUESSES && secretWord != guessedWord);

    if (badGuessCount < MAX_BAD_GUESSES) {
        cout << "Congratulations! You win!";
    } else {
        cout << "Sorry, you lost! The word was: " << secretWord;
    }
    return 0;
}
